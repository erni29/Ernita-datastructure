#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insertAtBeginning(struct Node** head_ref, int new_data);
void insertAfter(struct Node* prev_node, int new_data);
void insertAtEnd(struct Node** head_ref, int new_data);
struct Node* findElement(struct Node* head, int key);
struct Node* findNext(struct Node* head, int key);
struct Node* findPrevious(struct Node* head, int key);
int isLast(struct Node* head, struct Node* node);
int isEmpty(struct Node* head);
void deleteAtBeginning(struct Node** head_ref);
void deleteAfter(struct Node* prev_node);
void deleteAtEnd(struct Node** head_ref);
void deleteList(struct Node** head_ref);

int main() {
    struct Node* head = NULL;
    int choice, data;

    do {
        printf("\n1. Insert at beginning\n2. Insert after a node\n3. Insert at end\n4. Find an element\n5. Find next\n6. Find previous\n7. Check if last\n8. Check if empty\n9. Delete from beginning\n10. Delete after a node\n11. Delete from end\n12. Delete the list\n13. Display\n14. Exit\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert at the beginning: ");
                scanf("%d", &data);
                insertAtBeginning(&head, data);
                break;
            case 2:
                // Insert after a node
                break;
            case 3:
                // Insert at end
                break;
            case 4:
                // Find an element
                break;
            case 5:
                // Find next
                break;
            case 6:
                // Find previous
                break;
            case 7:
                // Check if last
                break;
            case 8:
                // Check if empty
                break;
            case 9:
                // Delete from beginning
                break;
            case 10:
                // Delete after a node
                break;
            case 11:
                // Delete from end
                break;
            case 12:
                // Delete the list
                break;
            case 13:
                // Display
                break;
            case 14:
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 14);

    return 0;
}

void insertAtBeginning(struct Node** head_ref, int new_data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->data = new_data;
    new_node->next = *head_ref;
    *head_ref = new_node;
}



