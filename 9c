#include <stdio.h>
#include <stdlib.h>

// Define the maximum number of vertices in the graph
#define MAX_VERTICES 100

// Define the structure for the adjacency list node
typedef struct Node {
    int vertex;
    struct Node* next;
} Node;

// Define the structure for the adjacency list
typedef struct {
    Node* head;
} AdjList;

// Define the structure for the graph
typedef struct {
    int numVertices;
    AdjList* array;
} Graph;

// Define the stack structure
typedef struct {
    int items[MAX_VERTICES];
    int top;
} Stack;

// Function to create a new adjacency list node
Node* createNode(int vertex) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with the given number of vertices
Graph* createGraph(int vertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = vertices;

    // Create an array of adjacency lists
    graph->array = (AdjList*)malloc(vertices * sizeof(AdjList));

    // Initialize each adjacency list as empty
    for (int i = 0; i < vertices; i++) {
        graph->array[i].head = NULL;
    }

    return graph;
}

// Function to add an edge to the graph
void addEdge(Graph* graph, int src, int dest) {
    // Add an edge from src to dest
    Node* newNode = createNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    // Add an edge from dest to src (since the graph is undirected)
    newNode = createNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// Function to create a stack
Stack* createStack() {
    Stack* stack = (Stack*)malloc(sizeof(Stack));
    stack->top = -1;
    return stack;
}

// Function to check if the stack is empty
int isEmpty(Stack* stack) {
    return stack->top == -1;
}

// Function to push an element onto the stack
void push(Stack* stack, int value) {
    stack->items[++stack->top] = value;
}

// Function to pop an element from the stack
int pop(Stack* stack) {
    return stack->items[stack->top--];
}

// Function to perform DFS on the graph
void DFS(Graph* graph, int startVertex) {
    Stack* stack = createStack();
    int* visited = (int*)malloc(graph->numVertices * sizeof(int));

    // Initialize all vertices as not visited
    for (int i = 0; i < graph->numVertices; i++) {
        visited[i] = 0;
    }

    // Push the start vertex onto the stack
    push(stack, startVertex);

    // Perform DFS
    while (!isEmpty(stack)) {
        int currentVertex = pop(stack);

        // If the vertex has not been visited, mark it as visited and print it
        if (!visited[currentVertex]) {
            printf("%d ", currentVertex);
            visited[currentVertex] = 1;
        }

        // Get all adjacent vertices of the current vertex
        Node* temp = graph->array[currentVertex].head;
        while (temp) {
            int adjVertex = temp->vertex;
            if (!visited[adjVertex]) {
                push(stack, adjVertex);
            }
            temp = temp->next;
        }
    }

    // Free the allocated memory
    free(visited);
    free(stack);
}

int main() {
    // Create the graph given in the example
    int vertices = 6;
    Graph* graph = createGraph(vertices);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 5);
    addEdge(graph, 4, 5);

    // Perform DFS starting from vertex 0
    printf("DFS starting from vertex 0:\n");
    DFS(graph, 0);

    // Free the allocated memory
    for (int i = 0; i < vertices; i++) {
        Node* temp = graph->array[i].head;
        while (temp) {
            Node* next = temp->next;
            free(temp);
            temp = next;
        }
    }
    free(graph->array);
    free(graph);
    return 0;
}
